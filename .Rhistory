ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.0001)
tree3 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree3)
library(rpart)
adress = "https://hastie.su.domains/ElemStatLearn/datasets/LAozone.data"
LAozone = read.table(adress,sep=",",head=T)
attach(LAozone)
tree1 = rpart(ozone ~ temp, data = LAozone)
print(tree1)
plot(tree1, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree1, all = FALSE, use.n = TRUE)
# a la place des cmds qu'elle a mises (print et plot ci dessus), on peut utiliser aussi
# ces fonctions pour représenter l'arbre de décision
library(rpart.plot)
rpart.plot(tree1, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.0001)
tree5 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree5)
plot(tree5, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree4, all = FALSE, use.n = TRUE)
text(tree5, all = FALSE, use.n = TRUE)
rpart.plot(tree5, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 1)
tree6 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree6)
plot(tree6, uniform = TRUE, branch = 0.5, margin = 0.1)
print(tree6)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0)
tree7 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree7)
plot(tree7, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree7, all = FALSE, use.n = TRUE)
rpart.plot(tree7, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.001)
tree51 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree51)
plot(tree51, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree51, all = FALSE, use.n = TRUE)
rpart.plot(tree51, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.0001)
tree5 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree5)
plot(tree5, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree5, all = FALSE, use.n = TRUE)
rpart.plot(tree5, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.001)
tree51 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree51)
plot(tree51, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree51, all = FALSE, use.n = TRUE)
rpart.plot(tree51, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.01)
tree51 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree51)
plot(tree51, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree51, all = FALSE, use.n = TRUE)
rpart.plot(tree51, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.1)
tree51 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree52)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.1)
tree52 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree52)
plot(tree52, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree52, all = FALSE, use.n = TRUE)
rpart.plot(tree52, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.01)
tree51 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree52)
plot(tree52, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree52, all = FALSE, use.n = TRUE)
rpart.plot(tree52, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.01)
tree51 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree52)
plot(tree52, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree52, all = FALSE, use.n = TRUE)
rpart.plot(tree52, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.1)
tree52 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree52)
plot(tree52, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree52, all = FALSE, use.n = TRUE)
rpart.plot(tree52, type=1, branch=0.4, uniform=FALSE)
# 3 noeuds, alpha 0.1
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.1)
tree53 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree53)
plot(tree53, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree53, all = FALSE, use.n = TRUE)
rpart.plot(tree53, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.01)
tree52 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree52)
plot(tree52, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree52, all = FALSE, use.n = TRUE)
rpart.plot(tree52, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.001)
tree51 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree51)
plot(tree51, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree51, all = FALSE, use.n = TRUE)
rpart.plot(tree51, type=1, branch=0.4, uniform=FALSE)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.0001)
tree5 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree5)
plot(tree5, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree5, all = FALSE, use.n = TRUE)
rpart.plot(tree5, type=1, branch=0.4, uniform=FALSE)
# Q. 6 Estimer un arbre de régression, tree en utilisant toutes les variables (et
# en choisissant judicieusement les paramètres de l’arbre).
# La fonction rpart contient des fonctionnalités permettant de tracer la courbe de
# l’erreur de prédiction obtenue par validation croisée en fonction du coefficient
# de pénalisation :
printcp(tree)
printcp(tree5)
plotcp(tree5)
ctrl = rpart.control(minsplit = 20, minbucket = 10, cp = 0.0001)
tree5 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree5)
plot(tree5, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree5, all = FALSE, use.n = TRUE)
rpart.plot(tree5, type=1, branch=0.4, uniform=FALSE)
printcp(tree5)
plotcp(tree5)
# bcp bcp noeuds, alpha 0.0001
ctrl = rpart.control(minsplit = 10, minbucket = 10, cp = 0.0001)
tree5 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree5)
plot(tree5, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree5, all = FALSE, use.n = TRUE)
rpart.plot(tree5, type=1, branch=0.4, uniform=FALSE)
printcp(tree5)
plotcp(tree5)
# bcp bcp noeuds, alpha 0.0001
ctrl = rpart.control(minsplit = 10, minbucket = 10, cp = 0.001)
tree5 = rpart(ozone ~ temp + humidity, control = ctrl, data=LAozone)
print(tree5)
plot(tree5, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree5, all = FALSE, use.n = TRUE)
rpart.plot(tree5, type=1, branch=0.4, uniform=FALSE)
printcp(tree5)
plotcp(tree5)
# Q. 7 Etudier l’allure de la courbe des erreurs. À quelle valeur du coefficient de
# complexité et à quelle taille d’arbre correspond l’arbre optimal ?
#   Affichez l’arbre optimal :
cp.opt = 0.02
tree.opt = prune(tree, cp = cp.opt )
plot(tree.opt, branch = 0.5, margin = 0.1)
# Q. 7 Etudier l’allure de la courbe des erreurs. À quelle valeur du coefficient de
# complexité et à quelle taille d’arbre correspond l’arbre optimal ?
#   Affichez l’arbre optimal :
cp.opt = 0.02
tree.opt = prune(tree5, cp = cp.opt )
plot(tree.opt, branch = 0.5, margin = 0.1)
text(tree.opt, all = FALSE, use.n = TRUE)
rpart.plot(tree.opt, type=1, branch=0.4, uniform=FALSE)
chaque variable -> c dans le pdt mais on n'aura pas le temps de le voir en cours.
chaque variable -> c dans le pdt mais on n'aura pas le temps de le voir en cours.
tree5$variable.importance
tree5 = rpart(ozone ~ ., control = ctrl, data=LAozone)
print(tree5)
plot(tree5, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree5, all = FALSE, use.n = TRUE)
rpart.plot(tree5, type=1, branch=0.4, uniform=FALSE)
printcp(tree5)
plotcp(tree5)
# bcp bcp noeuds, alpha 0.0001
ctrl = rpart.control(minsplit = 10, minbucket = 10, cp = 0.001)
tree5 = rpart(ozone ~ ., control = ctrl, data=LAozone)
print(tree5)
plot(tree5, uniform = TRUE, branch = 0.5, margin = 0.1)
text(tree5, all = FALSE, use.n = TRUE)
rpart.plot(tree5, type=1, branch=0.4, uniform=FALSE)
printcp(tree5)
plotcp(tree5)
# Q. 7 Etudier l’allure de la courbe des erreurs. À quelle valeur du coefficient de
# complexité et à quelle taille d’arbre correspond l’arbre optimal ?
#   Affichez l’arbre optimal :
cp.opt = 0.27707
tree5 = rpart(ozone ~ ., control = ctrl, data=LAozone)
tree.opt = prune(tree5, cp = cp.opt )
plot(tree.opt, branch = 0.5, margin = 0.1)
text(tree.opt, all = FALSE, use.n = TRUE)
rpart.plot(tree.opt, type=1, branch=0.4, uniform=FALSE)
# But: comparer les perfs des forêts aléatoires avec celles des arbres de décision
# Mais sur les données Ozone
Dtrain = Hitters[indxTrain,]
Dtest = Hitters[-indxTrain,]
library(caret)
set.seed(100)
indxTrain = createDataPartition(Hitters$Salary,p=0.75,list=FALSE)
Dtest = Hitters[-indxTrain,]
# But: comparer les perfs des forêts aléatoires avec celles des arbres de décision
# Mais sur les données Ozone
library(ISLR)
data(Hitters)
summary(Hitters)
Hitters = na.omit(Hitters)
library(caret)
set.seed(100)
indxTrain = createDataPartition(Hitters$Salary,p=0.75,list=FALSE)
Dtrain = Hitters[indxTrain,]
Dtest = Hitters[-indxTrain,]
# But: comparer les perfs des forêts aléatoires avec celles des arbres de décision
# Mais sur les données Ozone
library(ISLR)
data(Hitters)
summary(Hitters)
Hitters = na.omit(Hitters)
library(caret)
set.seed(100)
indxTrain = createDataPartition(Hitters$Salary, p=0.75, list=FALSE)
Dtrain = Hitters[indxTrain,]
Dtest = Hitters[-indxTrain,]
rf.oz=randomForest(ozone ~ . ,data = Dtrain, xtest = Dtest[,-19],
ytest = Dtest[,"Salary"],ntree=500,do.trace=50,importance=TRUE)
#
# 3 Forêts aléatoires
#
library(randomForest)
rf.oz=randomForest(ozone ~ . ,data = Dtrain, xtest = Dtest[,-19],
ytest = Dtest[,"Salary"],ntree=500,do.trace=50,importance=TRUE)
pred.rf = rf.oz$test$predicted
rf.oz=randomForest(Salary~.,data = Dtrain, xtest = Dtest[,-19],
ytest = Dtest[,"Salary"],ntree=500,do.trace=50,importance=TRUE)
pred.rf = rf.oz$test$predicted
# But: comparer les perfs des forêts aléatoires avec celles des arbres de décision
# Mais sur les données Ozone
library(ISLR)
Hitters = na.omit(Hitters)
indxTrain = createDataPartition(LAozone$ozone, p=0.75, list=FALSE)
library(caret)
set.seed(100)
indxTrain = createDataPartition(LAozone$ozone, p=0.75, list=FALSE)
Dtrain = LAozone[indxTrain,]
Dtest = LAozone[-indxTrain,]
rf.oz=randomForest(ozone ~ .,data = Dtrain, xtest = Dtest[,-1],
ytest = Dtest[,"ozone"],ntree=500, do.trace=50, importance=TRUE)
pred.rf = rf.oz$test$predicted
err.pred = mean((pref.rf - Dtest$ozone)^2)
err.pred = mean((pred.rf - Dtest$ozone)^2)
print(err.pred)
# Contributions des variables. On peut mesurer l’importance des variables en
# calculant la contribution de chaque variable à la décroissance moyenne du MSE :
sort(round(importance(rf.oz),2)[,1])
varImpPlot(rf.oz,main="Average Importance plots")
setwd("C:/_M2/Stats assurance/_Projet")
knitr::opts_chunk$set(echo = TRUE)
data = read.table("data.txt", sep = "", header=T)
# Verification des donnees manquantes
# install . packages (" funModeling ")
library ( funModeling )
install.packages("funModeling")
# Verification des donnees manquantes
# install.packages("funModeling")
library ( funModeling )
df_status ( dat) # aucun NA
df_status ( data) # aucun NA
data = read.table("data.txt", sep = "", header=T)
data = read.table("assurance_complete_corrige.R", sep = "", header=T)
data = read.table("assurance_complete_corrige.R") #, sep = "", header=T)
data = read.table("assurance_complete_corrige.R") #, sep = "", header=T)
data = read.table("data.txt", sep = "", header=T)
data = read.table("data.txt", sep = "", header=T , encoding = "UTF-8")
data = read.table("data.txt", sep = "", header=T , encoding = "UTF-8")
data = read.table("data.txt", sep = " ", header=T , encoding = "UTF-8")
library(readr)
library(readr)
result <- check_encoding("data.txt")
library(readr)
result <- check_encoding("data.txt")
print(result)
data = read.table("data.txt", sep = " ", header=T , encoding = "UTF-8")
result <- check_encoding("data.txt")
print(result)
install.packages("readr")
install.packages("readr")
library(readr)
result <- check_encoding("data.txt")
knitr::opts_chunk$set(echo = TRUE)
str(data)
summary(data)
# Verification des donnees manquantes
# install.packages("funModeling")
library ( funModeling )
df_status ( data) # aucun NA
install.packages("tidyverse")
install.packages("vctrs")
knitr::opts_chunk$set(echo = TRUE)
library("vctrs")
library("vctrs")
library("vctrs")
data = read.table("data.txt", sep = " ", header=T , encoding = "UTF-8")
